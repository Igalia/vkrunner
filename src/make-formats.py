#!/usr/bin/python3

import re
import sys

format_re = re.compile(r'\bVK_FORMAT_([A-Z0-9_]+)\b')
skip_re = re.compile(r'(?:_BLOCK(?:_IMG)?|_KHR|^UNDEFINED|'
                     r'^RANGE_SIZE|^MAX_ENUM|_RANGE)$')
component_re = re.compile('([A-Z]+)([0-9]+)')
pack_re = re.compile('PACK([0-9]+)$')

swizzles = [ 'RGBA', 'BGRA', 'ARGB', 'ABGR' ]

def get_formats(data):
    in_enum = False

    for line in data:
        if line.startswith('typedef enum VkFormat '):
            in_enum = True
        elif line.startswith('}'):
            in_enum = False
        if not in_enum:
            continue
        
        md = format_re.search(line)
        if md is None:
            continue
        name = md.group(1)
        if skip_re.search(name):
            continue
        yield(name)

def get_components(name):
    components = [(md.group(1), int(md.group(2)))
                  for md in component_re.finditer(name)]
    for letter, size in components:
        if "RGBA".find(letter) == -1:
            return None
    return components

def get_swizzle(components):
    component_letters = "".join((letter for letter, size in components))
    for swizzle in swizzles:
        if swizzle.startswith(component_letters):
            return swizzle
    print("Unknown swizzle {}".format(component_letters),
          file=sys.stderr)
    sys.exit(1)
        
formats = sorted(set(get_formats(sys.stdin)))

print("""/* Automatically generated by make-formats.py */
static const struct vr_format
formats[] = {""")

for name in formats:
    parts = name.split('_')

    components = get_components(parts[0])

    if components is None:
        continue

    swizzle = get_swizzle(components)

    if len(parts) >= 3:
        md = pack_re.match(parts[2])
        packed_size = int(md.group(1))
    else:
        packed_size = 0

    print("""        {{
                .vk_format = VK_FORMAT_{},
                .name = "{}",
                .packed_size = {},
                .swizzle = VR_FORMAT_SWIZZLE_{},
                .mode = VR_FORMAT_MODE_{},
                .n_components = {},
                .components = {{""".format(
                    name,
                    name,
                    packed_size,
                    swizzle,
                    parts[1],
                    len(components)))

    for letter, size in components:
        print("                        {{ .bits = {} }},".format(size))

    print("""                }
        },""")
    
print("};")
