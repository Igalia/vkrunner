#!/usr/bin/python3

# Copyright 2023 Neil Roberts

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# This script is used to generate pipeline_key_data.rs. It is not run
# automatically as part of the build process but if need be it can be
# used to update the file as follows:
#
# ./make-pipeline-key-data.py > pipeline_key_data.rs

from mako.template import Template

TEMPLATE="""\
// Automatically generated by make-pipeline-key-data.py

const N_BOOL_PROPERTIES: usize = ${sum(1 for p in props
                                       if p.base_type == "bool")};
const N_INT_PROPERTIES: usize = ${sum(1 for p in props
                                      if p.base_type == "int")};
const N_FLOAT_PROPERTIES: usize = ${sum(1 for p in props
                                        if p.base_type == "float")};

const TOPOLOGY_PROP_NUM: usize = ${next(p for p in props
                                        if p.name == "topology").num};
const PATCH_CONTROL_POINTS_PROP_NUM: usize = ${
    next(p for p in props if p.name == "patchControlPoints").num};

static PROPERTIES: [Property; ${len(props)}] = [
% for prop in sorted(props, key=lambda p: p.name):
    Property {
        prop_type: PropertyType::${prop.base_type.capitalize()},
        num: ${prop.num},
        name: "${prop.name}",
    },
% endfor
];

fn copy_properties_to_create_info(
    key: &Key,
    s: &mut vk::VkGraphicsPipelineCreateInfo
) {
${setters}
}

impl Default for Key {
    fn default() -> Key {
        Key {
            pipeline_type: Type::Graphics,
            source: Source::Rectangle,
            entrypoints: Default::default(),

            bool_properties: [
% for prop in sorted(props, key=lambda p: p.num):
%   if prop.base_type == "bool":
                ${prop.default}, // ${prop.name}
%   endif
% endfor
            ],
            int_properties: [
% for prop in sorted(props, key=lambda p: p.num):
%   if prop.base_type == "int":
                ${prop.default} as i32, // ${prop.name}
%   endif
% endfor
            ],
            float_properties: [
% for prop in sorted(props, key=lambda p: p.num):
%   if prop.base_type == "float":
                ${prop.default}, // ${prop.name}
%   endif
% endfor
            ],
        }
    }
}
"""


class Structure:
    def __init__(self, name, variable, children):
        self.name = name
        self.variable = variable
        self.children = children


class Property:
    def __init__(self, vk_type, name, default):
        self.vk_type = vk_type
        self.base_type = vk_type_as_base_type(vk_type)
        self.name = name
        self.default = default


class Properties:
    def __init__(self):
        self.values = []
        self.counts = {}

    def add(self, prop):
        base_type = prop.base_type
        try:
            self.counts[base_type] += 1
        except KeyError:
            self.counts[base_type] = 1

        prop.num = self.counts[base_type] - 1

        self.values.append(prop)


def vk_type_as_base_type(vk_type):
    if vk_type == "vk::VkBool32":
        return "bool"
    elif vk_type == "f32":
        return "float"
    elif vk_type == "u32":
        return "int"
    elif vk_type.startswith("vk::Vk"):
        return "int"

    raise ValueError("Unsupported Vulkan type: {}".format(vk_type))


STRUCTURES = [
    Structure("VkPipelineInputAssemblyStateCreateInfo",
              "pInputAssemblyState",
              [
                  Property("vk::VkPrimitiveTopology",
                           "topology",
                           "vk::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"),
                  Property("vk::VkBool32",
                           "primitiveRestartEnable",
                           "false"),
              ]),

    Structure("VkPipelineTessellationStateCreateInfo",
              "pTessellationState",
              [
                  Property("u32", "patchControlPoints", "0"),
              ]),

    Structure("VkPipelineRasterizationStateCreateInfo",
              "pRasterizationState",
              [
                  Property("vk::VkBool32", "depthClampEnable", "false"),
                  Property("vk::VkBool32", "rasterizerDiscardEnable", "false"),
                  Property("vk::VkPolygonMode",
                           "polygonMode",
                           "vk::VK_POLYGON_MODE_FILL"),
                  Property("vk::VkCullModeFlags",
                           "cullMode",
                           "vk::VK_CULL_MODE_NONE"),
                  Property("vk::VkFrontFace",
                           "frontFace",
                           "vk::VK_FRONT_FACE_COUNTER_CLOCKWISE"),
                  Property("vk::VkBool32", "depthBiasEnable", "false"),
                  Property("f32", "depthBiasConstantFactor", "0.0"),
                  Property("f32", "depthBiasClamp", "0.0"),
                  Property("f32", "depthBiasSlopeFactor", "0.0"),
                  Property("f32", "lineWidth", "1.0"),
              ]),

    Structure("VkPipelineColorBlendStateCreateInfo",
              "pColorBlendState",
              [
                  Property("vk::VkBool32", "logicOpEnable", "false"),
                  Property("vk::VkLogicOp", "logicOp", "vk::VK_LOGIC_OP_SET"),

                  Structure("VkPipelineColorBlendAttachmentState",
                            "pAttachments",
                            [
                                Property("vk::VkBool32",
                                         "blendEnable",
                                         "false"),
                                Property("vk::VkBlendFactor",
                                         "srcColorBlendFactor",
                                         "vk::VK_BLEND_FACTOR_SRC_ALPHA"),
                                Property("vk::VkBlendFactor",
                                         "dstColorBlendFactor",
                                         "vk::VK_BLEND_FACTOR_"
                                         "ONE_MINUS_SRC_ALPHA"),
                                Property("vk::VkBlendOp",
                                         "colorBlendOp",
                                         "vk::VK_BLEND_OP_ADD"),
                                Property("vk::VkBlendFactor",
                                         "srcAlphaBlendFactor",
                                         "vk::VK_BLEND_FACTOR_SRC_ALPHA"),
                                Property("vk::VkBlendFactor",
                                         "dstAlphaBlendFactor",
                                         "vk::VK_BLEND_FACTOR_"
                                         "ONE_MINUS_SRC_ALPHA"),
                                Property("vk::VkBlendOp",
                                         "alphaBlendOp",
                                         "vk::VK_BLEND_OP_ADD"),
                                Property("vk::VkColorComponentFlags",
                                         "colorWriteMask",
                                         "(vk::VK_COLOR_COMPONENT_R_BIT | "
                                         "vk::VK_COLOR_COMPONENT_G_BIT | "
                                         "vk::VK_COLOR_COMPONENT_B_BIT | "
                                         "vk::VK_COLOR_COMPONENT_A_BIT)"),
                            ]),
              ]),

    Structure("VkPipelineDepthStencilStateCreateInfo",
              "pDepthStencilState",
              [
                  Property("vk::VkBool32", "depthTestEnable", "false"),
                  Property("vk::VkBool32", "depthWriteEnable", "false"),
                  Property("vk::VkCompareOp",
                           "depthCompareOp",
                           "vk::VK_COMPARE_OP_LESS"),
                  Property("vk::VkBool32",
                           "depthBoundsTestEnable",
                           "false"),
                  Property("vk::VkBool32",
                           "stencilTestEnable",
                           "false"),
                  Property("vk::VkStencilOp",
                           "front.failOp",
                           "vk::VK_STENCIL_OP_KEEP"),
                  Property("vk::VkStencilOp",
                           "front.passOp",
                           "vk::VK_STENCIL_OP_KEEP"),
                  Property("vk::VkStencilOp",
                           "front.depthFailOp",
                           "vk::VK_STENCIL_OP_KEEP"),
                  Property("vk::VkCompareOp",
                           "front.compareOp",
                           "vk::VK_COMPARE_OP_ALWAYS"),
                  Property("u32",
                           "front.compareMask",
                           "u32::MAX"),
                  Property("u32",
                           "front.writeMask",
                           "u32::MAX"),
                  Property("u32",
                           "front.reference",
                           "0"),
                  Property("vk::VkStencilOp",
                           "back.failOp",
                           "vk::VK_STENCIL_OP_KEEP"),
                  Property("vk::VkStencilOp",
                           "back.passOp",
                           "vk::VK_STENCIL_OP_KEEP"),
                  Property("vk::VkStencilOp",
                           "back.depthFailOp",
                           "vk::VK_STENCIL_OP_KEEP"),
                  Property("vk::VkCompareOp",
                           "back.compareOp",
                           "vk::VK_COMPARE_OP_ALWAYS"),
                  Property("u32",
                           "back.compareMask",
                           "u32::MAX"),
                  Property("u32",
                           "back.writeMask",
                           "u32::MAX"),
                  Property("u32",
                           "back.reference",
                           "0"),
                  Property("f32", "minDepthBounds", "0.0"),
                  Property("f32", "maxDepthBounds", "0.0"),
              ])
]


def get_props(structure, props):
    for child in structure.children:
        if isinstance(child, Property):
            props.add(child)
        elif isinstance(child, Structure):
            get_props(child, props)
        else:
            raise Exception("STRUCTURES array is broken")


def make_setters(structure):
    parts = []

    parts.append("    {")
    parts.append("        let s = unsafe {{ "
                 "std::mem::transmute::<_, &mut vk::{}>(s.{}) }};".format(
                     structure.name,
                     structure.variable))

    for child in structure.children:
        if isinstance(child, Structure):
            parts.extend(map(lambda line: "    " + line,
                             make_setters(child)))
        elif isinstance(child, Property):
            parts.append("        s.{} = key.{}_properties[{}] as {};".format(
                child.name,
                child.base_type,
                child.num,
                child.vk_type))

    parts.append("    }")

    return parts


def main():
    template = Template(TEMPLATE)

    props = Properties()
    for structure in STRUCTURES:
        get_props(structure, props)

    setters = "\n".join(sum(map(make_setters, STRUCTURES), start=[]))

    print(template.render(props = props.values, setters = setters))


if __name__ == '__main__':
    main()
