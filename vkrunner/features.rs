// Automatically generated by make-features.py

static EXTENSIONS: [Extension; 27] = [
    Extension {
        name_bytes: vk::VK_KHR_16BIT_STORAGE_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDevice16BitStorageFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
        features: &[
            "storageBuffer16BitAccess",
            "uniformAndStorageBuffer16BitAccess",
            "storagePushConstant16",
            "storageInputOutput16",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_8BIT_STORAGE_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDevice8BitStorageFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
        features: &[
            "storageBuffer8BitAccess",
            "uniformAndStorageBuffer8BitAccess",
            "storagePushConstant8",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceASTCDecodeFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
        features: &[
            "decodeModeSharedExponent",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
        features: &[
            "advancedBlendCoherentOperations",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
        features: &[
            "bufferDeviceAddress",
            "bufferDeviceAddressCaptureReplay",
            "bufferDeviceAddressMultiDevice",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
        features: &[
            "computeDerivativeGroupQuads",
            "computeDerivativeGroupLinear",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceConditionalRenderingFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
        features: &[
            "conditionalRendering",
            "inheritedConditionalRendering",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceCornerSampledImageFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
        features: &[
            "cornerSampledImage",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
        features: &[
            "shaderInputAttachmentArrayDynamicIndexing",
            "shaderUniformTexelBufferArrayDynamicIndexing",
            "shaderStorageTexelBufferArrayDynamicIndexing",
            "shaderUniformBufferArrayNonUniformIndexing",
            "shaderSampledImageArrayNonUniformIndexing",
            "shaderStorageBufferArrayNonUniformIndexing",
            "shaderStorageImageArrayNonUniformIndexing",
            "shaderInputAttachmentArrayNonUniformIndexing",
            "shaderUniformTexelBufferArrayNonUniformIndexing",
            "shaderStorageTexelBufferArrayNonUniformIndexing",
            "descriptorBindingUniformBufferUpdateAfterBind",
            "descriptorBindingSampledImageUpdateAfterBind",
            "descriptorBindingStorageImageUpdateAfterBind",
            "descriptorBindingStorageBufferUpdateAfterBind",
            "descriptorBindingUniformTexelBufferUpdateAfterBind",
            "descriptorBindingStorageTexelBufferUpdateAfterBind",
            "descriptorBindingUpdateUnusedWhilePending",
            "descriptorBindingPartiallyBound",
            "descriptorBindingVariableDescriptorCount",
            "runtimeDescriptorArray",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceExclusiveScissorFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
        features: &[
            "exclusiveScissor",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceShaderFloat16Int8FeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR,
        features: &[
            "shaderFloat16",
            "shaderInt8",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceFragmentDensityMapFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
        features: &[
            "fragmentDensityMap",
            "fragmentDensityMapDynamic",
            "fragmentDensityMapNonSubsampledImages",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR,
        features: &[
            "fragmentShaderBarycentric",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceInlineUniformBlockFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
        features: &[
            "inlineUniformBlock",
            "descriptorBindingInlineUniformBlockUpdateAfterBind",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceMemoryPriorityFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
        features: &[
            "memoryPriority",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_MESH_SHADER_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceMeshShaderFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
        features: &[
            "taskShader",
            "meshShader",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_MULTIVIEW_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceMultiviewFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
        features: &[
            "multiview",
            "multiviewGeometryShader",
            "multiviewTessellationShader",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
        features: &[
            "representativeFragmentTest",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
        features: &[
            "samplerYcbcrConversion",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceScalarBlockLayoutFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,
        features: &[
            "scalarBlockLayout",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceShaderAtomicInt64FeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR,
        features: &[
            "shaderBufferInt64Atomics",
            "shaderSharedInt64Atomics",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceShaderImageFootprintFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
        features: &[
            "imageFootprint",
        ],
    },
    Extension {
        name_bytes: vk::VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceShadingRateImageFeaturesNV>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
        features: &[
            "shadingRateImage",
            "shadingRateCoarseSampleOrder",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceTransformFeedbackFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
        features: &[
            "transformFeedback",
            "geometryStreams",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceVariablePointersFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
        features: &[
            "variablePointersStorageBuffer",
            "variablePointers",
        ],
    },
    Extension {
        name_bytes: vk::VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
        features: &[
            "vertexAttributeInstanceRateDivisor",
            "vertexAttributeInstanceRateZeroDivisor",
        ],
    },
    Extension {
        name_bytes: vk::VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME,
        struct_size: mem::size_of::<vk::VkPhysicalDeviceVulkanMemoryModelFeaturesKHR>(),
        struct_type: vk::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
        features: &[
            "vulkanMemoryModel",
            "vulkanMemoryModelDeviceScope",
            "vulkanMemoryModelAvailabilityVisibilityChains",
        ],
    },
];

const N_BASE_FEATURES: usize = 55;

static BASE_FEATURES: [&'static str; N_BASE_FEATURES] = [
    "robustBufferAccess",
    "fullDrawIndexUint32",
    "imageCubeArray",
    "independentBlend",
    "geometryShader",
    "tessellationShader",
    "sampleRateShading",
    "dualSrcBlend",
    "logicOp",
    "multiDrawIndirect",
    "drawIndirectFirstInstance",
    "depthClamp",
    "depthBiasClamp",
    "fillModeNonSolid",
    "depthBounds",
    "wideLines",
    "largePoints",
    "alphaToOne",
    "multiViewport",
    "samplerAnisotropy",
    "textureCompressionETC2",
    "textureCompressionASTC_LDR",
    "textureCompressionBC",
    "occlusionQueryPrecise",
    "pipelineStatisticsQuery",
    "vertexPipelineStoresAndAtomics",
    "fragmentStoresAndAtomics",
    "shaderTessellationAndGeometryPointSize",
    "shaderImageGatherExtended",
    "shaderStorageImageExtendedFormats",
    "shaderStorageImageMultisample",
    "shaderStorageImageReadWithoutFormat",
    "shaderStorageImageWriteWithoutFormat",
    "shaderUniformBufferArrayDynamicIndexing",
    "shaderSampledImageArrayDynamicIndexing",
    "shaderStorageBufferArrayDynamicIndexing",
    "shaderStorageImageArrayDynamicIndexing",
    "shaderClipDistance",
    "shaderCullDistance",
    "shaderFloat64",
    "shaderInt64",
    "shaderInt16",
    "shaderResourceResidency",
    "shaderResourceMinLod",
    "sparseBinding",
    "sparseResidencyBuffer",
    "sparseResidencyImage2D",
    "sparseResidencyImage3D",
    "sparseResidency2Samples",
    "sparseResidency4Samples",
    "sparseResidency8Samples",
    "sparseResidency16Samples",
    "sparseResidencyAliased",
    "variableMultisampleRate",
    "inheritedQueries",
];

