// Automatically generated by make-vulkan-funcs-data.py

#[derive(Debug, Clone)]
#[allow(non_snake_case)]
pub struct Library {
    lib_vulkan: *const c_void,
    lib_vulkan_is_fake: bool,

    pub vkGetInstanceProcAddr: vk::PFN_vkGetInstanceProcAddr,
    pub vkCreateInstance: vk::PFN_vkCreateInstance,
    pub vkEnumerateInstanceExtensionProperties: vk::PFN_vkEnumerateInstanceExtensionProperties,
}

#[derive(Debug, Clone)]
#[allow(non_snake_case)]
pub struct Instance {
    pub vkCreateDevice: vk::PFN_vkCreateDevice,
    pub vkDestroyInstance: vk::PFN_vkDestroyInstance,
    pub vkEnumerateDeviceExtensionProperties: vk::PFN_vkEnumerateDeviceExtensionProperties,
    pub vkEnumeratePhysicalDevices: vk::PFN_vkEnumeratePhysicalDevices,
    pub vkGetDeviceProcAddr: vk::PFN_vkGetDeviceProcAddr,
    pub vkGetPhysicalDeviceFeatures: vk::PFN_vkGetPhysicalDeviceFeatures,
    pub vkGetPhysicalDeviceFormatProperties: vk::PFN_vkGetPhysicalDeviceFormatProperties,
    pub vkGetPhysicalDeviceMemoryProperties: vk::PFN_vkGetPhysicalDeviceMemoryProperties,
    pub vkGetPhysicalDeviceProperties: vk::PFN_vkGetPhysicalDeviceProperties,
    pub vkGetPhysicalDeviceQueueFamilyProperties: vk::PFN_vkGetPhysicalDeviceQueueFamilyProperties,
}

#[derive(Debug, Clone)]
#[allow(non_snake_case)]
pub struct Device {
    pub vkAllocateCommandBuffers: vk::PFN_vkAllocateCommandBuffers,
    pub vkAllocateDescriptorSets: vk::PFN_vkAllocateDescriptorSets,
    pub vkAllocateMemory: vk::PFN_vkAllocateMemory,
    pub vkBeginCommandBuffer: vk::PFN_vkBeginCommandBuffer,
    pub vkBindBufferMemory: vk::PFN_vkBindBufferMemory,
    pub vkBindImageMemory: vk::PFN_vkBindImageMemory,
    pub vkCmdBeginRenderPass: vk::PFN_vkCmdBeginRenderPass,
    pub vkCmdBindDescriptorSets: vk::PFN_vkCmdBindDescriptorSets,
    pub vkCmdBindIndexBuffer: vk::PFN_vkCmdBindIndexBuffer,
    pub vkCmdBindPipeline: vk::PFN_vkCmdBindPipeline,
    pub vkCmdBindVertexBuffers: vk::PFN_vkCmdBindVertexBuffers,
    pub vkCmdClearAttachments: vk::PFN_vkCmdClearAttachments,
    pub vkCmdCopyBufferToImage: vk::PFN_vkCmdCopyBufferToImage,
    pub vkCmdCopyImageToBuffer: vk::PFN_vkCmdCopyImageToBuffer,
    pub vkCmdDispatch: vk::PFN_vkCmdDispatch,
    pub vkCmdDraw: vk::PFN_vkCmdDraw,
    pub vkCmdDrawIndexed: vk::PFN_vkCmdDrawIndexed,
    pub vkCmdDrawIndexedIndirect: vk::PFN_vkCmdDrawIndexedIndirect,
    pub vkCmdEndRenderPass: vk::PFN_vkCmdEndRenderPass,
    pub vkCmdPipelineBarrier: vk::PFN_vkCmdPipelineBarrier,
    pub vkCmdPushConstants: vk::PFN_vkCmdPushConstants,
    pub vkCmdSetScissor: vk::PFN_vkCmdSetScissor,
    pub vkCmdSetViewport: vk::PFN_vkCmdSetViewport,
    pub vkCreateBuffer: vk::PFN_vkCreateBuffer,
    pub vkCreateCommandPool: vk::PFN_vkCreateCommandPool,
    pub vkCreateComputePipelines: vk::PFN_vkCreateComputePipelines,
    pub vkCreateDescriptorPool: vk::PFN_vkCreateDescriptorPool,
    pub vkCreateDescriptorSetLayout: vk::PFN_vkCreateDescriptorSetLayout,
    pub vkCreateFence: vk::PFN_vkCreateFence,
    pub vkCreateFramebuffer: vk::PFN_vkCreateFramebuffer,
    pub vkCreateGraphicsPipelines: vk::PFN_vkCreateGraphicsPipelines,
    pub vkCreateImage: vk::PFN_vkCreateImage,
    pub vkCreateImageView: vk::PFN_vkCreateImageView,
    pub vkCreatePipelineCache: vk::PFN_vkCreatePipelineCache,
    pub vkCreatePipelineLayout: vk::PFN_vkCreatePipelineLayout,
    pub vkCreateRenderPass: vk::PFN_vkCreateRenderPass,
    pub vkCreateSampler: vk::PFN_vkCreateSampler,
    pub vkCreateSemaphore: vk::PFN_vkCreateSemaphore,
    pub vkCreateShaderModule: vk::PFN_vkCreateShaderModule,
    pub vkDestroyBuffer: vk::PFN_vkDestroyBuffer,
    pub vkDestroyCommandPool: vk::PFN_vkDestroyCommandPool,
    pub vkDestroyDescriptorPool: vk::PFN_vkDestroyDescriptorPool,
    pub vkDestroyDescriptorSetLayout: vk::PFN_vkDestroyDescriptorSetLayout,
    pub vkDestroyDevice: vk::PFN_vkDestroyDevice,
    pub vkDestroyFence: vk::PFN_vkDestroyFence,
    pub vkDestroyFramebuffer: vk::PFN_vkDestroyFramebuffer,
    pub vkDestroyImage: vk::PFN_vkDestroyImage,
    pub vkDestroyImageView: vk::PFN_vkDestroyImageView,
    pub vkDestroyPipeline: vk::PFN_vkDestroyPipeline,
    pub vkDestroyPipelineCache: vk::PFN_vkDestroyPipelineCache,
    pub vkDestroyPipelineLayout: vk::PFN_vkDestroyPipelineLayout,
    pub vkDestroyRenderPass: vk::PFN_vkDestroyRenderPass,
    pub vkDestroySampler: vk::PFN_vkDestroySampler,
    pub vkDestroySemaphore: vk::PFN_vkDestroySemaphore,
    pub vkDestroyShaderModule: vk::PFN_vkDestroyShaderModule,
    pub vkEndCommandBuffer: vk::PFN_vkEndCommandBuffer,
    pub vkFlushMappedMemoryRanges: vk::PFN_vkFlushMappedMemoryRanges,
    pub vkFreeCommandBuffers: vk::PFN_vkFreeCommandBuffers,
    pub vkFreeDescriptorSets: vk::PFN_vkFreeDescriptorSets,
    pub vkFreeMemory: vk::PFN_vkFreeMemory,
    pub vkGetBufferMemoryRequirements: vk::PFN_vkGetBufferMemoryRequirements,
    pub vkGetDeviceQueue: vk::PFN_vkGetDeviceQueue,
    pub vkGetImageMemoryRequirements: vk::PFN_vkGetImageMemoryRequirements,
    pub vkGetImageSubresourceLayout: vk::PFN_vkGetImageSubresourceLayout,
    pub vkInvalidateMappedMemoryRanges: vk::PFN_vkInvalidateMappedMemoryRanges,
    pub vkMapMemory: vk::PFN_vkMapMemory,
    pub vkQueueSubmit: vk::PFN_vkQueueSubmit,
    pub vkQueueWaitIdle: vk::PFN_vkQueueWaitIdle,
    pub vkResetFences: vk::PFN_vkResetFences,
    pub vkUnmapMemory: vk::PFN_vkUnmapMemory,
    pub vkUpdateDescriptorSets: vk::PFN_vkUpdateDescriptorSets,
    pub vkWaitForFences: vk::PFN_vkWaitForFences,
}

impl Instance {
    pub unsafe fn new(
        get_instance_proc_cb: GetInstanceProcFunc,
        user_data: *const c_void,
    ) -> Instance {
        Instance {
            vkCreateDevice: std::mem::transmute(get_instance_proc_cb(
                "vkCreateDevice\0".as_ptr().cast(),
                user_data,
            )),
            vkDestroyInstance: std::mem::transmute(get_instance_proc_cb(
                "vkDestroyInstance\0".as_ptr().cast(),
                user_data,
            )),
            vkEnumerateDeviceExtensionProperties: std::mem::transmute(get_instance_proc_cb(
                "vkEnumerateDeviceExtensionProperties\0".as_ptr().cast(),
                user_data,
            )),
            vkEnumeratePhysicalDevices: std::mem::transmute(get_instance_proc_cb(
                "vkEnumeratePhysicalDevices\0".as_ptr().cast(),
                user_data,
            )),
            vkGetDeviceProcAddr: std::mem::transmute(get_instance_proc_cb(
                "vkGetDeviceProcAddr\0".as_ptr().cast(),
                user_data,
            )),
            vkGetPhysicalDeviceFeatures: std::mem::transmute(get_instance_proc_cb(
                "vkGetPhysicalDeviceFeatures\0".as_ptr().cast(),
                user_data,
            )),
            vkGetPhysicalDeviceFormatProperties: std::mem::transmute(get_instance_proc_cb(
                "vkGetPhysicalDeviceFormatProperties\0".as_ptr().cast(),
                user_data,
            )),
            vkGetPhysicalDeviceMemoryProperties: std::mem::transmute(get_instance_proc_cb(
                "vkGetPhysicalDeviceMemoryProperties\0".as_ptr().cast(),
                user_data,
            )),
            vkGetPhysicalDeviceProperties: std::mem::transmute(get_instance_proc_cb(
                "vkGetPhysicalDeviceProperties\0".as_ptr().cast(),
                user_data,
            )),
            vkGetPhysicalDeviceQueueFamilyProperties: std::mem::transmute(get_instance_proc_cb(
                "vkGetPhysicalDeviceQueueFamilyProperties\0".as_ptr().cast(),
                user_data,
            )),
        }
    }
}

impl Device {
    pub fn new(instance: &Instance, device: vk::VkDevice) -> Device {
        Device {
            vkAllocateCommandBuffers: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkAllocateCommandBuffers\0".as_ptr().cast(),
                ))
            },
            vkAllocateDescriptorSets: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkAllocateDescriptorSets\0".as_ptr().cast(),
                ))
            },
            vkAllocateMemory: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkAllocateMemory\0".as_ptr().cast(),
                ))
            },
            vkBeginCommandBuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkBeginCommandBuffer\0".as_ptr().cast(),
                ))
            },
            vkBindBufferMemory: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkBindBufferMemory\0".as_ptr().cast(),
                ))
            },
            vkBindImageMemory: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkBindImageMemory\0".as_ptr().cast(),
                ))
            },
            vkCmdBeginRenderPass: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdBeginRenderPass\0".as_ptr().cast(),
                ))
            },
            vkCmdBindDescriptorSets: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdBindDescriptorSets\0".as_ptr().cast(),
                ))
            },
            vkCmdBindIndexBuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdBindIndexBuffer\0".as_ptr().cast(),
                ))
            },
            vkCmdBindPipeline: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdBindPipeline\0".as_ptr().cast(),
                ))
            },
            vkCmdBindVertexBuffers: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdBindVertexBuffers\0".as_ptr().cast(),
                ))
            },
            vkCmdClearAttachments: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdClearAttachments\0".as_ptr().cast(),
                ))
            },
            vkCmdCopyBufferToImage: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdCopyBufferToImage\0".as_ptr().cast(),
                ))
            },
            vkCmdCopyImageToBuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdCopyImageToBuffer\0".as_ptr().cast(),
                ))
            },
            vkCmdDispatch: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdDispatch\0".as_ptr().cast(),
                ))
            },
            vkCmdDraw: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdDraw\0".as_ptr().cast(),
                ))
            },
            vkCmdDrawIndexed: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdDrawIndexed\0".as_ptr().cast(),
                ))
            },
            vkCmdDrawIndexedIndirect: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdDrawIndexedIndirect\0".as_ptr().cast(),
                ))
            },
            vkCmdEndRenderPass: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdEndRenderPass\0".as_ptr().cast(),
                ))
            },
            vkCmdPipelineBarrier: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdPipelineBarrier\0".as_ptr().cast(),
                ))
            },
            vkCmdPushConstants: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdPushConstants\0".as_ptr().cast(),
                ))
            },
            vkCmdSetScissor: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdSetScissor\0".as_ptr().cast(),
                ))
            },
            vkCmdSetViewport: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCmdSetViewport\0".as_ptr().cast(),
                ))
            },
            vkCreateBuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateBuffer\0".as_ptr().cast(),
                ))
            },
            vkCreateCommandPool: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateCommandPool\0".as_ptr().cast(),
                ))
            },
            vkCreateComputePipelines: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateComputePipelines\0".as_ptr().cast(),
                ))
            },
            vkCreateDescriptorPool: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateDescriptorPool\0".as_ptr().cast(),
                ))
            },
            vkCreateDescriptorSetLayout: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateDescriptorSetLayout\0".as_ptr().cast(),
                ))
            },
            vkCreateFence: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateFence\0".as_ptr().cast(),
                ))
            },
            vkCreateFramebuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateFramebuffer\0".as_ptr().cast(),
                ))
            },
            vkCreateGraphicsPipelines: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateGraphicsPipelines\0".as_ptr().cast(),
                ))
            },
            vkCreateImage: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateImage\0".as_ptr().cast(),
                ))
            },
            vkCreateImageView: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateImageView\0".as_ptr().cast(),
                ))
            },
            vkCreatePipelineCache: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreatePipelineCache\0".as_ptr().cast(),
                ))
            },
            vkCreatePipelineLayout: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreatePipelineLayout\0".as_ptr().cast(),
                ))
            },
            vkCreateRenderPass: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateRenderPass\0".as_ptr().cast(),
                ))
            },
            vkCreateSampler: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateSampler\0".as_ptr().cast(),
                ))
            },
            vkCreateSemaphore: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateSemaphore\0".as_ptr().cast(),
                ))
            },
            vkCreateShaderModule: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkCreateShaderModule\0".as_ptr().cast(),
                ))
            },
            vkDestroyBuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyBuffer\0".as_ptr().cast(),
                ))
            },
            vkDestroyCommandPool: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyCommandPool\0".as_ptr().cast(),
                ))
            },
            vkDestroyDescriptorPool: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyDescriptorPool\0".as_ptr().cast(),
                ))
            },
            vkDestroyDescriptorSetLayout: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyDescriptorSetLayout\0".as_ptr().cast(),
                ))
            },
            vkDestroyDevice: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyDevice\0".as_ptr().cast(),
                ))
            },
            vkDestroyFence: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyFence\0".as_ptr().cast(),
                ))
            },
            vkDestroyFramebuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyFramebuffer\0".as_ptr().cast(),
                ))
            },
            vkDestroyImage: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyImage\0".as_ptr().cast(),
                ))
            },
            vkDestroyImageView: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyImageView\0".as_ptr().cast(),
                ))
            },
            vkDestroyPipeline: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyPipeline\0".as_ptr().cast(),
                ))
            },
            vkDestroyPipelineCache: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyPipelineCache\0".as_ptr().cast(),
                ))
            },
            vkDestroyPipelineLayout: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyPipelineLayout\0".as_ptr().cast(),
                ))
            },
            vkDestroyRenderPass: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyRenderPass\0".as_ptr().cast(),
                ))
            },
            vkDestroySampler: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroySampler\0".as_ptr().cast(),
                ))
            },
            vkDestroySemaphore: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroySemaphore\0".as_ptr().cast(),
                ))
            },
            vkDestroyShaderModule: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkDestroyShaderModule\0".as_ptr().cast(),
                ))
            },
            vkEndCommandBuffer: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkEndCommandBuffer\0".as_ptr().cast(),
                ))
            },
            vkFlushMappedMemoryRanges: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkFlushMappedMemoryRanges\0".as_ptr().cast(),
                ))
            },
            vkFreeCommandBuffers: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkFreeCommandBuffers\0".as_ptr().cast(),
                ))
            },
            vkFreeDescriptorSets: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkFreeDescriptorSets\0".as_ptr().cast(),
                ))
            },
            vkFreeMemory: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkFreeMemory\0".as_ptr().cast(),
                ))
            },
            vkGetBufferMemoryRequirements: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkGetBufferMemoryRequirements\0".as_ptr().cast(),
                ))
            },
            vkGetDeviceQueue: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkGetDeviceQueue\0".as_ptr().cast(),
                ))
            },
            vkGetImageMemoryRequirements: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkGetImageMemoryRequirements\0".as_ptr().cast(),
                ))
            },
            vkGetImageSubresourceLayout: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkGetImageSubresourceLayout\0".as_ptr().cast(),
                ))
            },
            vkInvalidateMappedMemoryRanges: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkInvalidateMappedMemoryRanges\0".as_ptr().cast(),
                ))
            },
            vkMapMemory: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkMapMemory\0".as_ptr().cast(),
                ))
            },
            vkQueueSubmit: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkQueueSubmit\0".as_ptr().cast(),
                ))
            },
            vkQueueWaitIdle: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkQueueWaitIdle\0".as_ptr().cast(),
                ))
            },
            vkResetFences: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkResetFences\0".as_ptr().cast(),
                ))
            },
            vkUnmapMemory: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkUnmapMemory\0".as_ptr().cast(),
                ))
            },
            vkUpdateDescriptorSets: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkUpdateDescriptorSets\0".as_ptr().cast(),
                ))
            },
            vkWaitForFences: unsafe {
                std::mem::transmute(instance.vkGetDeviceProcAddr.unwrap()(
                    device,
                    "vkWaitForFences\0".as_ptr().cast(),
                ))
            },
        }
    }
}
