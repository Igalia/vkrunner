[require]
shaderFloat64

[vertex shader passthrough]

[fragment shader]
#version 430

layout(location = 0) out vec4 color;

layout(std140, push_constant) uniform block {
        dvec4 given_doub;
        dvec4 expected_mantissa;
        ivec4 expected_exponent;
};

void main()
{
	/* Green if both pass. */
	color = vec4(0.0, 1.0, 0.0, 1.0);

	ivec4 exponent;
	dvec4 mantissa;

	mantissa = frexp(given_doub, exponent);

	if (mantissa != expected_mantissa) {
		color.r = 1.0;
	}

	if (exponent != expected_exponent) {
		color.b = 1.0;
	}
}

[test]
uniform dvec4 0 0.0 -0.0 0.5 -0.5
uniform dvec4 32 0.0 -0.0 0.5 -0.5
uniform ivec4 64 0 0 0 0
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

uniform dvec4 0 0.49 1.0 25.0 100
uniform dvec4 32 0.98 0.5 0.78125 0.78125
uniform ivec4 64 -1 1 5 7
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Test FLT_MIN/MAX in doubles
uniform dvec4 0 1.1754943508222875e-38 -1.1754943508222875e-38 3.4028234699999998e+38 -3.4028234699999998e+38
uniform dvec4 32 0.5 -0.5 0.99999994145762339 -0.99999994145762339
uniform ivec4 64 -125 -125 128 128
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

# Test DBL_MIN/MAX
uniform dvec4 0 2.2250738585072014e-308 -2.2250738585072014e-308 1.7976931348623157e+308 -1.7976931348623157e+308
uniform dvec4 32 0.5 -0.5 0.99999999999999989 -0.99999999999999989
uniform ivec4 64 -1021 -1021 1024 1024
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
