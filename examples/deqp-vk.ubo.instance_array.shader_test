[vertex shader passthrough]

[fragment shader spirv]
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 7
; Bound: 109
; Schema: 0
OpCapability Shader
%1 = OpExtInstImport "GLSL.std.450";
OpMemoryModel Logical GLSL450
OpEntryPoint Fragment %4 "main" %103 %105
OpExecutionMode %4 OriginUpperLeft
OpDecorate %11 RelaxedPrecision
OpDecorate %18 RelaxedPrecision
OpDecorate %40 RelaxedPrecision
OpDecorate %48 RelaxedPrecision
OpDecorate %49 RelaxedPrecision
OpDecorate %57 RelaxedPrecision
OpDecorate %58 RelaxedPrecision
OpDecorate %66 RelaxedPrecision
OpDecorate %67 RelaxedPrecision
OpDecorate %70 RelaxedPrecision
OpMemberDecorate %71 0 Offset 0
OpDecorate %71 Block
OpDecorate %74 DescriptorSet 0
OpDecorate %74 Binding 0
OpDecorate %83 RelaxedPrecision
OpDecorate %84 RelaxedPrecision
OpDecorate %85 RelaxedPrecision
OpDecorate %91 RelaxedPrecision
OpDecorate %92 RelaxedPrecision
OpDecorate %93 RelaxedPrecision
OpDecorate %99 RelaxedPrecision
OpDecorate %100 RelaxedPrecision
OpDecorate %101 RelaxedPrecision
OpDecorate %103 RelaxedPrecision
OpDecorate %103 Location 0
OpDecorate %105 RelaxedPrecision
OpDecorate %105 Location 0
OpDecorate %106 RelaxedPrecision
OpDecorate %107 RelaxedPrecision
OpDecorate %108 RelaxedPrecision
%2 = OpTypeVoid
%3 = OpTypeFunction %2
%6 = OpTypeFloat 32
%7 = OpTypePointer Function %6
%8 = OpTypeFunction %6 %7 %7
%13 = OpTypeVector %6 4
%14 = OpTypePointer Function %13
%15 = OpTypeFunction %6 %14 %14
%24 = OpConstant %6 0.0500000007
%25 = OpTypeBool
%27 = OpConstant %6 1
%28 = OpConstant %6 0
%33 = OpTypeInt 32 0
%34 = OpConstant %33 0
%42 = OpConstant %33 1
%51 = OpConstant %33 2
%60 = OpConstant %33 3
%71 = OpTypeStruct %13
%72 = OpTypeArray %71 %60
%73 = OpTypePointer Uniform %72
%74 = OpVariable %73 Uniform
%75 = OpTypeInt 32 1
%76 = OpConstant %75 0
%77 = OpConstantComposite %13 %28 %28 %28 %28
%79 = OpTypePointer Uniform %13
%86 = OpConstant %75 1
%94 = OpConstant %75 2
%102 = OpTypePointer Output %13
%103 = OpVariable %102 Output
%104 = OpTypePointer Input %6
%105 = OpVariable %104 Input
%4 = OpFunction %2 None %3
%5 = OpLabel
%70 = OpVariable %7 Function
%78 = OpVariable %14 Function
%82 = OpVariable %14 Function
%87 = OpVariable %14 Function
%90 = OpVariable %14 Function
%95 = OpVariable %14 Function
%98 = OpVariable %14 Function
OpStore %70 %27
%80 = OpAccessChain %79 %74 %76 %76
%81 = OpLoad %13 %80
OpStore %78 %81
OpStore %82 %77
%83 = OpFunctionCall %6 %18 %78 %82
%84 = OpLoad %6 %70
%85 = OpFMul %6 %84 %83
OpStore %70 %85
%88 = OpAccessChain %79 %74 %86 %76
%89 = OpLoad %13 %88
OpStore %87 %89
OpStore %90 %77
%91 = OpFunctionCall %6 %18 %87 %90
%92 = OpLoad %6 %70
%93 = OpFMul %6 %92 %91
OpStore %70 %93
%96 = OpAccessChain %79 %74 %94 %76
%97 = OpLoad %13 %96
OpStore %95 %97
OpStore %98 %77
%99 = OpFunctionCall %6 %18 %95 %98
%100 = OpLoad %6 %70
%101 = OpFMul %6 %100 %99
OpStore %70 %101
%106 = OpLoad %6 %105
%107 = OpLoad %6 %70
%108 = OpCompositeConstruct %13 %27 %106 %107 %27
OpStore %103 %108
OpReturn
OpFunctionEnd
%11 = OpFunction %6 None %8
%9 = OpFunctionParameter %7
%10 = OpFunctionParameter %7
%12 = OpLabel
%20 = OpLoad %6 %9
%21 = OpLoad %6 %10
%22 = OpFSub %6 %20 %21
%23 = OpExtInst %6 %1 FAbs %22
%26 = OpFOrdLessThan %25 %23 %24
%29 = OpSelect %6 %26 %27 %28
OpReturnValue %29
OpFunctionEnd
%18 = OpFunction %6 None %15
%16 = OpFunctionParameter %14
%17 = OpFunctionParameter %14
%19 = OpLabel
%32 = OpVariable %7 Function
%37 = OpVariable %7 Function
%41 = OpVariable %7 Function
%45 = OpVariable %7 Function
%50 = OpVariable %7 Function
%54 = OpVariable %7 Function
%59 = OpVariable %7 Function
%63 = OpVariable %7 Function
%35 = OpAccessChain %7 %16 %34
%36 = OpLoad %6 %35
OpStore %32 %36
%38 = OpAccessChain %7 %17 %34
%39 = OpLoad %6 %38
OpStore %37 %39
%40 = OpFunctionCall %6 %11 %32 %37
%43 = OpAccessChain %7 %16 %42
%44 = OpLoad %6 %43
OpStore %41 %44
%46 = OpAccessChain %7 %17 %42
%47 = OpLoad %6 %46
OpStore %45 %47
%48 = OpFunctionCall %6 %11 %41 %45
%49 = OpFMul %6 %40 %48
%52 = OpAccessChain %7 %16 %51
%53 = OpLoad %6 %52
OpStore %50 %53
%55 = OpAccessChain %7 %17 %51
%56 = OpLoad %6 %55
OpStore %54 %56
%57 = OpFunctionCall %6 %11 %50 %54
%58 = OpFMul %6 %49 %57
%61 = OpAccessChain %7 %16 %60
%62 = OpLoad %6 %61
OpStore %59 %62
%64 = OpAccessChain %7 %17 %60
%65 = OpLoad %6 %64
OpStore %63 %65
%66 = OpFunctionCall %6 %11 %59 %63
%67 = OpFMul %6 %58 %66
OpReturnValue %67
OpFunctionEnd

[fragment shader]
#version 450
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_8bit_storage : enable
#extension GL_EXT_scalar_block_layout : enable
layout(location = 0) in mediump float v_vtxResult;
layout(location = 0) out mediump vec4 dEQP_FragColor;

layout(set = 0, binding = 0, std140) uniform Block
{
	highp vec4 var;
} block[3];

mediump float compare_float    (highp float a, highp float b)  { return abs(a - b) < 0.05 ? 1.0 : 0.0; }
mediump float compare_vec4     (highp vec4 a, highp vec4 b)    { return compare_float(a.x, b.x)*compare_float(a.y, b.y)*compare_float(a.z, b.z)*compare_float(a.w, b.w); }

void main (void)
{
	mediump float result = 1.0;
	result *= compare_vec4((block[0].var), vec4(0.0, 0.0, 0.0, 0.0));
	result *= compare_vec4((block[1].var), vec4(0.0, 0.0, 0.0, 0.0));
	result *= compare_vec4((block[2].var), vec4(0.0, 0.0, 0.0, 0.0));
	dEQP_FragColor = vec4(1.0, v_vtxResult, result, 1.0);
}

[test]
clear color 1.0 0.0 0.0 0.0
clear

# On Vulkan, arrays of resources uses the same binding. In that sense
# an array of ubos

uniform ubo 0 vec4 0 20530.7108263 -10508.5105669 -23051.9953613 -23564.0673228
uniform ubo 0 vec4 16 -3274.39775692 -7391.61915007 29371.4563058 7793.47278553

draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
