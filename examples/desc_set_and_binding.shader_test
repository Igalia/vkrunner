[require]
fragmentStoresAndAtomics

[vertex shader passthrough]

[fragment shader]
#version 450

layout(location = 0) out vec4 color_out;

layout(binding = 3) buffer block {
        vec4 color_in;
        vec3 triangle;
        uint three;
};

layout(binding = 4) buffer block0 {
        vec4 set0_binding4;
        vec4 set0_binding4_result;
};

layout(set = 0, binding = 5) buffer block1 {
        vec4 set0_binding5;
        vec4 set0_binding5_result;
};

layout(set = 1, binding = 3) buffer block2 {
        vec4 set1_binding3;
        vec4 set1_binding3_result;
};

layout(set = 1, binding = 5) buffer block3 {
        vec4 set1_binding5;
        vec4 set1_binding5_result;
};

layout(set = 1, binding = 6) buffer block4 {
        vec4 set1_binding6;
        vec4 set1_binding6_result;
};

layout(set = 2, binding = 0) buffer block5 {
        vec4 set2_binding0;
        vec4 set2_binding0_result;
};

layout(set = 2, binding = 3) buffer block6 {
        vec4 set2_binding3;
        vec4 set2_binding3_result;
};

layout(set = 2, binding = 4) buffer block7 {
        vec4 set2_binding4;
        vec4 set2_binding4_result;
};

layout(set = 2, binding = 7) buffer block8 {
        vec4 set2_binding7;
        vec4 set2_binding7_result;
};

layout(set = 3, binding = 2) uniform block9 {
        vec4 ubo_set3_binding2;
};

layout(set = 3, binding = 6) uniform block10 {
        vec4 ubo_set3_binding6;
};

layout(set = 3, binding = 10) uniform block11 {
        vec4 ubo_set3_binding10;
};

void
main()
{
        // Descriptor set and binding test
        set2_binding7_result = set0_binding4;
        set0_binding4_result = set0_binding5;
        set0_binding5_result = set1_binding3;
        set1_binding3_result = set1_binding5 + ubo_set3_binding2;
        set1_binding5_result = set1_binding6;
        set1_binding6_result = set2_binding0;
        set2_binding0_result = set2_binding3 + ubo_set3_binding6;
        set2_binding3_result = set2_binding4 + ubo_set3_binding10;
        set2_binding4_result = set2_binding7;

        color_out = color_in;
        three = 3;
        triangle = vec3(3, 4, 5);
}

[test]
clear

# Set color_in
ssbo 3 subdata vec4 0 0.0 1.0 0.0 1.0

# Clear other values
ssbo 3 subdata vec3 16 0.0 0.0 0.0
ssbo 3 subdata uint 28 0

# Descriptor set and binding test
ssbo 0:4 subdata vec4 0 0.4 0.4 0.4 0.4
ssbo 5 subdata vec4 0 0.5 0.5 0.5 0.5
ssbo 1:3 subdata vec4 0 1.3 1.3 1.3 1.3
ssbo 1:5 subdata vec4 0 1.5 1.5 1.5 1.5
ssbo 1:6 subdata vec4 0 1.6 1.6 1.6 1.6
ssbo 2:0 subdata vec4 0 2.0 2.0 2.0 2.0
ssbo 2:3 subdata vec4 0 2.3 2.3 2.3 2.3
ssbo 2:4 subdata vec4 0 2.4 2.4 2.4 2.4
ssbo 2:7 subdata vec4 0 2.7 2.7 2.7 2.7

ssbo 0:4 subdata vec4 16 0.4 0.4 0.4 0.4
ssbo 5 subdata vec4 16 0.5 0.5 0.5 0.5
ssbo 1:3 subdata vec4 16 1.3 1.3 1.3 1.3
ssbo 1:5 subdata vec4 16 1.5 1.5 1.5 1.5
ssbo 1:6 subdata vec4 16 1.6 1.6 1.6 1.6
ssbo 2:0 subdata vec4 16 2.0 2.0 2.0 2.0
ssbo 2:3 subdata vec4 16 2.3 2.3 2.3 2.3
ssbo 2:4 subdata vec4 16 2.4 2.4 2.4 2.4
ssbo 2:7 subdata vec4 16 2.7 2.7 2.7 2.7

ubo 3:2 subdata vec4 0 0.1 0.2 0.3 0.4
ubo 3:6 subdata vec4 0 0.2 0.4 0.6 0.8
ubo 3:10 subdata vec4 0 -0.1 -0.2 -0.3 -0.4


draw rect -1 -1 2 2

# Probe the buffer to make sure that reading the SSBO worked
probe all rgba 0.0 1.0 0.0 1.0

# Probe the SSBO to check that writing worked
probe ssbo vec3 3 16 == 3 4 5
probe ssbo uint 3 28 < 4
probe ssbo uint 3 28 == 3

# Descriptor set and binding test
#
# Note that floating point values might not be exactly same
# and we allow small errors i.e., 0.000001
#
tolerance 0.00001
probe ssbo vec4 4   16 ~=  0.5 0.5 0.5 0.5
probe ssbo vec4 0:5 16 ~=  1.3 1.3 1.3 1.3
probe ssbo vec4 1:3 16 ~=  1.6 1.7 1.8 1.9
probe ssbo vec4 1:5 16 ~=  1.6 1.6 1.6 1.6
probe ssbo vec4 1:6 16 ~=  2.0 2.0 2.0 2.0
probe ssbo vec4 2:0 16 ~=  2.5 2.7 2.9 3.1
probe ssbo vec4 2:3 16 ~=  2.3 2.2 2.1 2.0
probe ssbo vec4 2:4 16 ~=  2.7 2.7 2.7 2.7
probe ssbo vec4 2:7 16 ~=  0.4 0.4 0.4 0.4
